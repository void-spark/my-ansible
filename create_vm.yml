# Invocation: ansible-playbook -i hosts create_vm.yml -e "vm_name=ubuntu-k8s-node1 vm_mem=16384 vm_cores=4 vm_hd=32 vm_mac=E6:EF:4E:DB:CA:29"
# Invocation: ansible-playbook -i hosts create_vm.yml -e "vm_name=ubuntu-k8s-node2 vm_mem=16384 vm_cores=4 vm_hd=32 vm_mac=E6:EF:4E:DB:CA:30"
# Invocation: ansible-playbook -i hosts create_vm.yml -e "vm_name=ubuntu-k8s-node3 vm_mem=16384 vm_cores=4 vm_hd=32 vm_mac=E6:EF:4E:DB:CA:31"

- name: "Setup ubuntu VM {{ vm_name }}"
  hosts: pve
  vars:
    ansible_python_interpreter: /usr/bin/python3
  vars_files:
    - vars.yml

  tasks:
  - name: "Create local folders"
    file:
      path: "/tmp/{{ vm_name }}/{{ item }}"
      state: directory
    with_items:
      - src
      - build
      - dst
    delegate_to: localhost

  - name: "Get kernel and initrd"
    get_url:
      url: "http://nl.archive.ubuntu.com/ubuntu/dists/bionic/main/installer-amd64/current/images/netboot/ubuntu-installer/amd64/{{ item }}"
      dest: "/tmp/{{ vm_name }}/src/"
    with_items:
      - linux
      - initrd.gz
    delegate_to: localhost

  - name: "Copy kernel and initrd"
    copy:
      src: "/tmp/{{ vm_name }}/src/{{ item }}"
      dest: "/tmp/{{ vm_name }}/dst/{{ item }}"
      force: yes
    with_items:
      - linux
      - initrd.gz
    delegate_to: localhost

  - name: "Copy Ubuntu preseed file"
    template:
      src: "preseed.cfg.j2"
      dest: "/tmp/{{ vm_name }}/build/preseed.cfg"
    delegate_to: localhost

  - name: "Copy ssh public key"
    copy:
      src: "/root/.ssh/id_rsa.pub"
      dest: "/tmp/{{ vm_name }}/build/id_rsa.pub"
      force: yes
    delegate_to: localhost

  - name: "Add to initrd.gz"
    shell: "find . | cpio -H newc -o | gzip -9 >> /tmp/{{ vm_name }}/dst/initrd.gz"
    args:
      chdir: "/tmp/{{ vm_name }}/build"
    delegate_to: localhost

  - name: "Copy kernel and initrd to ProxMox host"
    copy:
      src: "/tmp/{{ vm_name }}/dst/{{ item }}"
      dest: "/tmp/{{ vm_name }}.{{ item }}"
      force: yes
    with_items:
      - linux
      - initrd.gz

  - name: "Cleanup local work folders"
    file:
      path: "/tmp/{{ vm_name }}"
      state: absent
    delegate_to: localhost

  - name: "Create {{ vm_name }}"
    proxmox_kvm:
      api_host: "{{ pve_api_host }}"
      api_user: "{{ pve_api_user }}"
      api_password: "{{ pve_api_password }}"
      node: pve
      name: "{{ vm_name }}"
      cores: "{{ vm_cores }}"
      memory: "{{ vm_mem }}"
      balloon: "{{ vm_mem }}"
      scsi: '{"scsi0":"local-lvm:{{ vm_hd }},format=raw"}'
      scsihw: virtio-scsi-pci
      net: '{"net0":"virtio={{ vm_mac }},bridge=vmbr0,firewall=1"}'
      ostype: l26
      args: '-kernel /tmp/{{ vm_name }}.linux -initrd /tmp/{{ vm_name }}.initrd.gz'
      agent: yes
      onboot: yes
    delegate_to: localhost

  - name: Wait for VM creation
    proxmox_kvm:
      api_host: "{{ pve_api_host }}"
      api_user: "{{ pve_api_user }}"
      api_password: "{{ pve_api_password }}"
      name: "{{ vm_name }}"
      state: current
    register: result
    until: result.msg.find("stopped") != -1
    retries: 30
    delay: 2
    delegate_to: localhost

  - name: "Start installation on VM"
    proxmox_kvm:
      api_host: "{{ pve_api_host }}"
      api_user: "{{ pve_api_user }}"
      api_password: "{{ pve_api_password }}"
      name: "{{ vm_name }}"
      state: 'started'
    delegate_to: localhost

  - name: Wait for VM shutdown
    proxmox_kvm:
      api_host: "{{ pve_api_host }}"
      api_user: "{{ pve_api_user }}"
      api_password: "{{ pve_api_password }}"
      name: "{{ vm_name }}"
      state: current
    register: result
    until: result.msg.find("stopped") != -1
    retries: 180
    delay: 10
    delegate_to: localhost

  - name: Delete custom QEMU args from VM
    proxmox_kvm:
      api_host: "{{ pve_api_host }}"
      api_user: "{{ pve_api_user }}"
      api_password: "{{ pve_api_password }}"
      name: "{{ vm_name }}"
      node: pve
      delete: 'args'
    delegate_to: localhost

  - name: "Delete kernel and initrd from ProxMox host"
    file:
      path: "/tmp/{{ vm_name }}.{{ item }}"
      state: absent
    with_items:
      - linux
      - initrd.gz

  - name: "Start VM"
    proxmox_kvm:
      api_host: "{{ pve_api_host }}"
      api_user: "{{ pve_api_user }}"
      api_password: "{{ pve_api_password }}"
      name: "{{ vm_name }}"
      state: 'started'
    delegate_to: localhost
